__all__ = [
    'UserBonus',
    'UserBonusCreateRequestParameters',
    'UserBonusesCreateRequestParameters',
]
import datetime
import decimal
import toloka.client.primitives.base
import toloka.client.primitives.parameter
import typing
import uuid


class UserBonus(toloka.client.primitives.base.BaseTolokaObject):
    """A bonus payment to a Toloker.

    Learn more about [Bonuses](https://toloka.ai/docs/guide/bonus/).

    Attributes:
        id: The ID of the bonus.
        user_id: The ID of the Toloker.
        amount: The amount of the bonus in US dollars.
        assignment_id: The ID of the assignment the bonus is issued for.
        private_comment: A comment visible to the requester only.
        without_message:
            * `False` — A message is sent to the Toloker when the bonus is issued.
            * `True` — There is no message sent to the Toloker.

            Default value: `False`.
        public_title: A message title. The title can be provided in several languages.
        public_message: A message text. It can be provided in several languages.
        created: The UTC date and time when the bonus was issued. Read-only field.

    Example:
        An example of issuing a bonus. A message to a Toloker is prepared in two languages.

        >>> from decimal import Decimal
        >>> new_bonus = toloka_client.create_user_bonus(
        >>>     toloka.client.UserBonus(
        >>>         user_id='a1b0b42923c429daa2c764d7ccfc364d',
        >>>         amount=Decimal('0.50'),
        >>>         public_title={
        >>>             'EN': 'Good Job!',
        >>>             'RU': 'Молодец!',
        >>>         },
        >>>         public_message={
        >>>             'EN': 'Ten tasks were completed',
        >>>             'RU': 'Выполнено 10 заданий',
        >>>         },
        >>>         assignment_id='000015fccc--63bfc4c358d7a46c32a7b233'
        >>>     )
        >>> )
        ...
    """

    def __init__(
        self,
        *,
        user_id: typing.Optional[str] = None,
        amount: typing.Optional[decimal.Decimal] = None,
        private_comment: typing.Optional[str] = None,
        public_title: typing.Optional[typing.Dict[str, str]] = None,
        public_message: typing.Optional[typing.Dict[str, str]] = None,
        without_message: typing.Optional[bool] = None,
        assignment_id: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        created: typing.Optional[datetime.datetime] = None
    ) -> None:
        """Method generated by attrs for class UserBonus.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    user_id: typing.Optional[str]
    amount: typing.Optional[decimal.Decimal]
    private_comment: typing.Optional[str]
    public_title: typing.Optional[typing.Dict[str, str]]
    public_message: typing.Optional[typing.Dict[str, str]]
    without_message: typing.Optional[bool]
    assignment_id: typing.Optional[str]
    id: typing.Optional[str]
    created: typing.Optional[datetime.datetime]


class UserBonusCreateRequestParameters(toloka.client.primitives.parameter.IdempotentOperationParameters):
    """Parameters for issuing a bonus payment to a Toloker.

    The [create_user_bonus](toloka.client.TolokaClient.create_user_bonus.md) method uses these parameters.

    Attributes:
        operation_id: The UUID of the operation that conforms to the [RFC4122 standard](https://tools.ietf.org/html/rfc4122).
            The UUID is used if `async_mode` is `True`.

            Specify UUID to avoid accidental errors like Toloka operation duplication caused by network problems.
            If you send several requests with the same `operation_id`, Toloka performs the operation only once.
        async_mode: Request processing mode:
            * `True` — Asynchronous operation is started internally.
            * `False` — The request is processed synchronously.

            Default value: `True`.
    """

    def __init__(
        self,
        *,
        operation_id: typing.Optional[uuid.UUID] = ...,
        async_mode: typing.Optional[bool] = True
    ) -> None:
        """Method generated by attrs for class UserBonusCreateRequestParameters.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    operation_id: typing.Optional[uuid.UUID]
    async_mode: typing.Optional[bool]


class UserBonusesCreateRequestParameters(UserBonusCreateRequestParameters):
    """Parameters for issuing bonus payments to Tolokers.

    The [create_user_bonuses](toloka.client.TolokaClient.create_user_bonuses.md) and [create_user_bonuses_async](toloka.client.TolokaClient.create_user_bonuses_async.md) methods use these parameters.

    Attributes:
        operation_id: The UUID of the operation that conforms to the [RFC4122 standard](https://tools.ietf.org/html/rfc4122).
            The UUID is used if `async_mode` is `True`.

            Specify UUID to avoid accidental errors like Toloka operation duplication caused by network problems.
            If you send several requests with the same `operation_id`, Toloka performs the operation only once.
        async_mode: Request processing mode:
            * `True` — Asynchronous operation is started internally.
            * `False` — The request is processed synchronously.

            Default value: `True`.
        skip_invalid_items: Bonus validation option:
            * `True` — All valid bonuses are issued. If a bonus doesn't pass validation, then it isn't issued to a Toloker. All such bonuses are listed in the response.
            * `False` — If any bonus doesn't pass validation, then the operation is cancelled and no bonuses are issued to Tolokers.

            Default value: `False`.
    """

    def __init__(
        self,
        *,
        operation_id: typing.Optional[uuid.UUID] = ...,
        async_mode: typing.Optional[bool] = True,
        skip_invalid_items: typing.Optional[bool] = None
    ) -> None:
        """Method generated by attrs for class UserBonusesCreateRequestParameters.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    operation_id: typing.Optional[uuid.UUID]
    async_mode: typing.Optional[bool]
    skip_invalid_items: typing.Optional[bool]
