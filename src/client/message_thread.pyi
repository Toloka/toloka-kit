__all__ = [
    'RecipientsSelectType',
    'Folder',
    'Interlocutor',
    'MessageThread',
    'MessageThreadReply',
    'MessageThreadFolders',
    'MessageThreadCompose',
]
import datetime
import toloka.client.filter
import toloka.client.primitives.base
import toloka.util._extendable_enum
import typing


class RecipientsSelectType(toloka.util._extendable_enum.ExtendableStrEnum):
    """The way of specifying message recipients.

    Attributes:
        DIRECT: A list of Toloker IDs.
        FILTER: A filter for selecting Tolokers.
        ALL: All Tolokers who completed any of your tasks at least once.
    """

    DIRECT = 'DIRECT'
    FILTER = 'FILTER'
    ALL = 'ALL'


class Folder(toloka.util._extendable_enum.ExtendableStrEnum):
    """A folder with threads.
    """

    INBOX = 'INBOX'
    OUTBOX = 'OUTBOX'
    AUTOMATIC_NOTIFICATION = 'AUTOMATIC_NOTIFICATION'
    IMPORTANT = 'IMPORTANT'
    UNREAD = 'UNREAD'


class Interlocutor(toloka.client.primitives.base.BaseTolokaObject):
    """Information about a message sender or recipient.

    Attributes:
        id: The ID of the sender or recipient.
        role: The role in Toloka.
        myself: A flag that is set to `True` when the ID is yours.
    """

    class InterlocutorRole(toloka.util._extendable_enum.ExtendableStrEnum):
        """A role in Toloka.

        Attributes:
            USER: A Toloker.
            REQUESTER: A Requester.
            ADMINISTRATOR: An administrator.
            SYSTEM: The Toloka itself. This role is used for messages that are sent automatically.
        """

        USER = 'USER'
        REQUESTER = 'REQUESTER'
        ADMINISTRATOR = 'ADMINISTRATOR'
        SYSTEM = 'SYSTEM'

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        role: typing.Union[InterlocutorRole, str, None] = None,
        myself: typing.Optional[bool] = None
    ) -> None:
        """Method generated by attrs for class Interlocutor.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    id: typing.Optional[str]
    role: typing.Optional[InterlocutorRole]
    myself: typing.Optional[bool]


class MessageThread(toloka.client.primitives.base.BaseTolokaObject):
    """A message thread.

    A message thread is created when you send a new message. Then responses are placed to the thread.
    Until the first response is received the message thread is in the `UNREAD` folder.

    If the message has several recipients then a message thread is created for each recipient when they responds.

    Attributes:
        id: The ID of the thread.
        topic: The message thread title. `topic` is a dictionary with two letter language codes as keys.
        interlocutors_inlined: The way of accessing information about the sender and recipients:
            * `True` — Information is available in the `interlocutors` list.
            * `False` — Information is available on a separate request.
        interlocutors: A list with information about the sender and recipients, sorted by IDs.
        messages_inlined: The way of accessing messages:
            * `True` — The messages are in the `messages` list.
            * `False` — The messages are available on a separate request.
        messages: A list with thread messages. The list is sorted by creation date: newer messages come first.
        meta: Thread meta information.
        answerable:
            * `True` — Tolokers can respond to your messages.
            * `False` — Tolokers can't respond to your messages.
        folders: Folders containing the thread.
        compose_details: The details of selecting recipients. This information is provided if the first message in the thread was yours.
        created: The date and time when the first message in the thread was created.
    """

    class ComposeDetails(toloka.client.primitives.base.BaseTolokaObject):
        """The details of selecting recipients.

        Attributes:
            recipients_select_type: The way of specifying message recipients.
            recipients_ids: A list of Toloker IDs. It is filled if `recipients_select_type` is `DIRECT`.
            recipients_filter: A filter for selecting Tolokers. It is set if `recipients_select_type` is `FILTER`.
        """

        def __init__(
            self,
            *,
            recipients_select_type: typing.Union[RecipientsSelectType, str, None] = None,
            recipients_ids: typing.Optional[typing.List[str]] = None,
            recipients_filter: typing.Optional[toloka.client.filter.FilterCondition] = None
        ) -> None:
            """Method generated by attrs for class MessageThread.ComposeDetails.
            """
            ...

        _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
        recipients_select_type: typing.Optional[RecipientsSelectType]
        recipients_ids: typing.Optional[typing.List[str]]
        recipients_filter: typing.Optional[toloka.client.filter.FilterCondition]

    class Meta(toloka.client.primitives.base.BaseTolokaObject):
        def __init__(
            self,
            *,
            pool_id: typing.Optional[str] = None,
            project_id: typing.Optional[str] = None,
            assignment_id: typing.Optional[str] = None
        ) -> None:
            """Method generated by attrs for class MessageThread.Meta.
            """
            ...

        _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
        pool_id: typing.Optional[str]
        project_id: typing.Optional[str]
        assignment_id: typing.Optional[str]

    class Message(toloka.client.primitives.base.BaseTolokaObject):
        """A message in a thread.

        Attributes:
            text: The message text. The `text` is a dictionary with two letter language codes as keys.
            from_: Information about the sender.
            created: The date and time when the message was created.
        """

        def __init__(
            self,
            *,
            text: typing.Optional[typing.Dict[str, str]] = None,
            from_: typing.Optional[Interlocutor] = None,
            created: typing.Optional[datetime.datetime] = None
        ) -> None:
            """Method generated by attrs for class MessageThread.Message.
            """
            ...

        _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
        text: typing.Optional[typing.Dict[str, str]]
        from_: typing.Optional[Interlocutor]
        created: typing.Optional[datetime.datetime]

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        topic: typing.Optional[typing.Dict[str, str]] = None,
        interlocutors_inlined: typing.Optional[bool] = None,
        interlocutors: typing.Optional[typing.List[Interlocutor]] = None,
        messages_inlined: typing.Optional[bool] = None,
        messages: typing.Optional[typing.List[Message]] = None,
        meta: typing.Optional[Meta] = None,
        answerable: typing.Optional[bool] = None,
        folders: typing.Optional[typing.List[Folder]] = None,
        compose_details: typing.Optional[ComposeDetails] = None,
        created: typing.Optional[datetime.datetime] = None
    ) -> None:
        """Method generated by attrs for class MessageThread.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    id: typing.Optional[str]
    topic: typing.Optional[typing.Dict[str, str]]
    interlocutors_inlined: typing.Optional[bool]
    interlocutors: typing.Optional[typing.List[Interlocutor]]
    messages_inlined: typing.Optional[bool]
    messages: typing.Optional[typing.List[Message]]
    meta: typing.Optional[Meta]
    answerable: typing.Optional[bool]
    folders: typing.Optional[typing.List[Folder]]
    compose_details: typing.Optional[ComposeDetails]
    created: typing.Optional[datetime.datetime]


class MessageThreadReply(toloka.client.primitives.base.BaseTolokaObject):
    """A reply in a message thread.

    Attributes:
        text: A dictionary with the message text.
            Two letter language code is a key in the dictionary. The message in a preferred Toloker's language is sent, if available.
    """

    def __init__(self, *, text: typing.Optional[typing.Dict[str, str]] = None) -> None:
        """Method generated by attrs for class MessageThreadReply.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    text: typing.Optional[typing.Dict[str, str]]


class MessageThreadFolders(toloka.client.primitives.base.BaseTolokaObject):
    """Folders for a message thread.

    Attributes:
        folders: A list of folders for a message thread.
    """

    def __init__(self, *, folders: typing.Optional[typing.List[Folder]] = None) -> None:
        """Method generated by attrs for class MessageThreadFolders.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    folders: typing.Optional[typing.List[Folder]]


class MessageThreadCompose(toloka.client.primitives.base.BaseTolokaObject):
    """Parameters for creating a message thread with the first message.

    The `topic` and `text` parameters are dictionaries.
    Two letter language code is a key in the dictionaries. If available, the text in a Toloker preferred language is used.

    Attributes:
        recipients_select_type: The way of specifying message recipients.
        topic: The message thread title.
        text: The message text.
        answerable:
            * `True` — Tolokers can respond to your messages.
            * `False` — Tolokers can't respond to your messages.
        recipients_ids: A list of Toloker IDs. It is filled if `recipients_select_type` is `DIRECT`.
        recipients_filter: A filter for selecting Tolokers. It is set if `recipients_select_type` is `FILTER`.
    """

    def unstructure(self) -> typing.Optional[dict]: ...

    def __init__(
        self,
        *,
        recipients_select_type: typing.Union[RecipientsSelectType, str, None] = None,
        topic: typing.Optional[typing.Dict[str, str]] = None,
        text: typing.Optional[typing.Dict[str, str]] = None,
        answerable: typing.Optional[bool] = None,
        recipients_ids: typing.Optional[typing.List[str]] = None,
        recipients_filter: typing.Optional[toloka.client.filter.FilterCondition] = None
    ) -> None:
        """Method generated by attrs for class MessageThreadCompose.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    recipients_select_type: typing.Optional[RecipientsSelectType]
    topic: typing.Optional[typing.Dict[str, str]]
    text: typing.Optional[typing.Dict[str, str]]
    answerable: typing.Optional[bool]
    recipients_ids: typing.Optional[typing.List[str]]
    recipients_filter: typing.Optional[toloka.client.filter.FilterCondition]
