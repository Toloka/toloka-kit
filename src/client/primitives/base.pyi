from attr._make import Attribute
from enum import Enum
from typing import (
    Any,
    Dict,
    List,
    Optional,
    Type,
    TypeVar,
    Union
)

E = TypeVar('E', bound=Enum)

class VariantRegistry:
    def __init__(self, field: str, enum: Type[E]): ...

    def register(self, type_: type, value: E) -> type: ...

def attribute(*args, required=False, origin=None, **kwargs): ...


class BaseTolokaObjectMetaclass(type):
    @staticmethod
    def transformer(type_: type, fields: List[Attribute]) -> List[Attribute]: ...


class BaseTolokaObject:
    """A base class for classes representing Toloka objects.



    Subclasses of BaseTolokaObject will:
    * Automatically convert annotated attributes attributes via attrs making them optional
      if not explicitly configured otherwise
    * Skip missing optional fields during unstructuring with client's cattr converter
    """

    def __init__(self) -> None:
        """Method generated by attrs for class BaseTolokaObject.
        """
        ...

    @classmethod
    def get_spec_subclass_for_value(cls, spec_value: Union[str, E] = None) -> type: ...

    @classmethod
    def get_variant_specs(cls) -> dict: ...

    @classmethod
    def is_variant_base(cls) -> bool: ...

    @classmethod
    def is_variant_incomplete(cls) -> bool: ...

    @classmethod
    def is_variant_spec(cls) -> bool: ...

    @classmethod
    def structure(cls, data: dict): ...

    def unstructure(self) -> Optional[dict]: ...

    _unexpected: Optional[Dict[str, Any]]
