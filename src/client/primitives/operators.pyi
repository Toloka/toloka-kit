from enum import Enum

class CompareOperator(Enum):
    """An enumeration.
    """

    EQ = 'EQ'
    NE = 'NE'
    GT = 'GT'
    GTE = 'GTE'
    LT = 'LT'
    LTE = 'LTE'


class InclusionOperator(Enum):
    """An enumeration.
    """

    IN = 'IN'
    NOT_IN = 'NOT_IN'


class IdentityOperator(Enum):
    """An enumeration.
    """

    EQ = 'EQ'
    NE = 'NE'


class InclusionConditionMixin:
    def __init__(self, operator: InclusionOperator) -> None:
        """Method generated by attrs for class InclusionConditionMixin.
        """
        ...

    operator: InclusionOperator


class IdentityConditionMixin:
    def __init__(self, operator: IdentityOperator) -> None:
        """Method generated by attrs for class IdentityConditionMixin.
        """
        ...

    operator: IdentityOperator


class ComparableConditionMixin:
    def __init__(self, operator: CompareOperator) -> None:
        """Method generated by attrs for class ComparableConditionMixin.
        """
        ...

    operator: CompareOperator


class StatefulComparableConditionMixin:
    def eq(self, value): ...

    def gt(self, value): ...

    def gte(self, value): ...

    def lt(self, value): ...

    def lte(self, value): ...

    def ne(self, value): ...
