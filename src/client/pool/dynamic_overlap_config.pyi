__all__ = [
    'DynamicOverlapConfig',
]
import toloka.client.primitives.base
import toloka.util._extendable_enum
import typing


class DynamicOverlapConfig(toloka.client.primitives.base.BaseTolokaObject):
    """Dynamic overlap settings.

    Toloka can automatically increase an overlap of tasks if the confidence level of aggregated responses is not high enough.

    Dynamic overlap uses the `BASIC` algorithm.
    Each response is assigned a weight depending on the Toloker's skill value.
    The aggregated response confidence is calculated based on the probability algorithm.
    The task overlap increases until it reaches `max_overlap` or until the confidence of the aggregated response exceeds `min_confidence`.

    Note, that if you use dynamic overlap, then set the `auto_close_after_complete_delay_seconds` pool parameter to a non zero value.

    Learn more about the [Dynamic overlap](https://toloka.ai/docs/guide/dynamic-overlap) in the guide.

    Attributes:
        type: The dynamic overlap algorithm.
        max_overlap: Maximum overlap. The value must be higher than the default overlap value. Allowed range: from 1 to 30,000.
        min_confidence: Minimum required confidence of the aggregated response. Allowed range: from 0 to 1.
        answer_weight_skill_id: A skill that determines the weight of the Toloker's responses.
            For the best results, use a skill calculated as a percentage of correct responses in control tasks.
        fields: A list of output data fields used for aggregating responses.
            For the best results, each field must have a limited number of response options.
            Don't specify fields in the list together if they depend on each other.
    """

    class Type(toloka.util._extendable_enum.ExtendableStrEnum):
        """The algorithm for dynamic overlap.

        Attributes:
            BASIC: The algorithm based on a Toloker's skill value.
        """

        BASIC = 'BASIC'

    class Field(toloka.client.primitives.base.BaseTolokaObject):
        """An output data field used for aggregating responses.

        Attributes:
            name: The name of the output field.
        """

        def __init__(self, name: typing.Optional[str] = None) -> None:
            """Method generated by attrs for class DynamicOverlapConfig.Field.
            """
            ...

        _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
        name: typing.Optional[str]

    def __init__(
        self,
        *,
        type: typing.Union[Type, str, None] = None,
        max_overlap: typing.Optional[int] = None,
        min_confidence: typing.Optional[float] = None,
        answer_weight_skill_id: typing.Optional[str] = None,
        fields: typing.Optional[typing.List[Field]] = None
    ) -> None:
        """Method generated by attrs for class DynamicOverlapConfig.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    type: typing.Optional[Type]
    max_overlap: typing.Optional[int]
    min_confidence: typing.Optional[float]
    answer_weight_skill_id: typing.Optional[str]
    fields: typing.Optional[typing.List[Field]]
