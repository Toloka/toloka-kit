from enum import Enum
from toloka.client.primitives.base import BaseTolokaObject
from typing import (
    Any,
    Dict,
    List,
    Optional
)

class TaskDistributionFunction(BaseTolokaObject):
    """Issue of tasks with uneven frequency

    Can be used for:
    - Distribution of tasks with majority opinion verification.
    - Issuing control tasks with uneven frequency. Allows you to change the frequency of verification as the user completes tasks.
    - Issuing training tasks with uneven frequency. Allows you to change the frequency of training tasks as the user completes tasks.

    Attributes:
        scope: How to count tasks completed by the user:
            * POOL - Count completed pool tasks.
            * PROJECT - Count completed project tasks.
        distribution: Distribution of tasks within an interval. Parameter has only one possible:
            value - UNIFORM.
        window_days: Period in which completed tasks are counted (number of days).
        intervals: Interval borders and number of tasks in an interval.
    """

    class Distribution(Enum):
        """An enumeration.
        """

        UNIFORM = 'UNIFORM'

    class Interval(BaseTolokaObject):
        """Interval borders and number of tasks in an interval

        Attributes:
            from_: Start of the interval (number of task completed by the user in the project or in the pool).
            to: End of the interval (number of task completed by the user in the project or in the pool).
            frequency: Frequency of tasks in an interval. The first task in an interval is a distributed task.
                For example, if you set frequency: 3 tasks number 1, 4, 7 and so on will be distributed tasks.
        """

        def __init__(self, *, from_: Optional[int] = None, to: Optional[int] = None, frequency: Optional[int] = None) -> None:
            """Method generated by attrs for class TaskDistributionFunction.Interval.
            """
            ...

        _unexpected: Optional[Dict[str, Any]]
        from_: Optional[int]
        to: Optional[int]
        frequency: Optional[int]

    class Scope(Enum):
        """An enumeration.
        """

        PROJECT = 'PROJECT'
        POOL = 'POOL'

    def __init__(self, *, scope: Optional[Scope] = None, distribution: Optional[Distribution] = None, window_days: Optional[int] = None, intervals: Optional[List[Interval]] = None) -> None:
        """Method generated by attrs for class TaskDistributionFunction.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    scope: Optional[Scope]
    distribution: Optional[Distribution]
    window_days: Optional[int]
    intervals: Optional[List[Interval]]
