__all__ = [
    'TaskDistributionFunction',
]
import toloka.client.primitives.base
import toloka.util._extendable_enum
import typing


class TaskDistributionFunction(toloka.client.primitives.base.BaseTolokaObject):
    """A configuration of selecting tasks.

    It is used:
    - To control the selection of tasks for the selective majority vote checks.
    - To change the frequency of assigning control or training tasks.

    Attributes:
        scope: A way of counting tasks completed by a Toloker:
            * `POOL` — Completed pool tasks are counted.
            * `PROJECT` — All completed project tasks are counted.
        distribution: The distribution of selected tasks within an interval.
            Allowed values: `UNIFORM`.
        window_days: The number of days in which completed tasks are counted.
            Allowed values: from 1 to 365.
        intervals: A list of count intervals with frequency values.
            The maximum number of list items is 10,000.
    """

    class Scope(toloka.util._extendable_enum.ExtendableStrEnum):
        """An enumeration.
        """

        PROJECT = 'PROJECT'
        POOL = 'POOL'

    class Distribution(toloka.util._extendable_enum.ExtendableStrEnum):
        """An enumeration.
        """

        UNIFORM = 'UNIFORM'

    class Interval(toloka.client.primitives.base.BaseTolokaObject):
        """A count interval with associated frequency value.

        If the number of tasks is in the interval then the task distribution uses the interval frequency.

        The value of the `frequency` parameter encodes a period in a task sequence.
        For example, if `frequency` is 3, then the 1st, 4th, 7th tasks are selected. And so on.

        Attributes:
            from_: The lower bound of the interval.
                Allowed values: up to 1,000,000.
            to: The upper bound of the interval.
                Allowed values: up to 1,000,000.
            frequency: The frequency of tasks within an interval.
                Allowed values: from 1 to 10,000,000.
        """

        def __init__(
            self,
            *,
            from_: typing.Optional[int] = None,
            to: typing.Optional[int] = None,
            frequency: typing.Optional[int] = None
        ) -> None:
            """Method generated by attrs for class TaskDistributionFunction.Interval.
            """
            ...

        _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
        from_: typing.Optional[int]
        to: typing.Optional[int]
        frequency: typing.Optional[int]

    def __init__(
        self,
        *,
        scope: typing.Union[Scope, str, None] = None,
        distribution: typing.Union[Distribution, str, None] = None,
        window_days: typing.Optional[int] = None,
        intervals: typing.Optional[typing.List[Interval]] = None
    ) -> None:
        """Method generated by attrs for class TaskDistributionFunction.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    scope: typing.Optional[Scope]
    distribution: typing.Optional[Distribution]
    window_days: typing.Optional[int]
    intervals: typing.Optional[typing.List[Interval]]
