__all__ = [
    'App',
    'AppBatch',
    'AppBatchCreateRequest',
    'AppBatchPatch',
    'AppItem',
    'AppItemCreateRequest',
    'AppItemsCreateRequest',
    'AppProject',
    'SyncBatchCreateRequest',
]
import datetime
import decimal
import toloka.client.primitives.base
import toloka.client.project.field_spec
import toloka.util._extendable_enum
import typing


class _AppError(toloka.client.primitives.base.BaseTolokaObject):
    """A structure for describing errors which may appear while working with App projects.

    Attributes:
        code: The short name of the error.
        message: The detailed description of the error.
        payload: Additional data provided with the error.
    """

    def __init__(
        self,
        *,
        code: typing.Optional[str] = None,
        message: typing.Optional[str] = None,
        payload: typing.Optional[typing.Any] = None
    ) -> None:
        """Method generated by attrs for class _AppError.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    code: typing.Optional[str]
    message: typing.Optional[str]
    payload: typing.Optional[typing.Any]


class AppLightestResult(toloka.client.primitives.base.BaseTolokaObject):
    """Brief information about the project template.

    Attributes:
        id: The ID of the App solution.
        name: The solution name.
    """

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        name: typing.Optional[str] = None
    ) -> None:
        """Method generated by attrs for class AppLightestResult.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    id: typing.Optional[str]
    name: typing.Optional[str]


class AppProject(toloka.client.primitives.base.BaseTolokaObject):
    """An [App](https://toloka.ai/docs/api/apps-reference/#tag--app-project) project.

    An App project is based on one of App solutions. It is created with a template interface and preconfigured data specification and quality control rules.

    To get available App solutions use the [get_apps](toloka.client.TolokaClient.get_apps.md) method.

    Attributes:
        app_id: The ID of the App solution used to create the project.
        parent_app_project_id: The ID of the parent project. It is set if this project is a clone of other project. Otherwise it is empty.
        name: The project name.
        parameters: Parameters of the solution. The parameters should follow the schema described in the `param_spec` field of the [solution](toloka.client.app.App.md).
        id: The ID of the project.
        status: The project status:
            * `CREATING` — Toloka is checking the project.
            * `READY` — The project is active.
            * `ARCHIVED` — The project was archived.
            * `ERROR` — Project creation failed due to errors.
        created: The date and time when the project was created.
        item_price: The price you pay for a processed item.
        errors: Errors found during a project check.
        read_only:
            * `True` — The project is read-only.
            * `False` — The project can be modified.
        app: Brief information about the project template.

    Example:
        Creating an App project.

        >>> app_project = toloka.client.AppProject(
        >>>     app_id='9lZaMl363jahzra1rrYq',
        >>>     name='Example project (product relevance)',
        >>>     parameters={
        >>>         'default_language': 'en',
        >>>         'name': 'Product relevance project',
        >>>         'instruction_classes': [
        >>>             {
        >>>                 'description': 'The product is relevant to the query.',
        >>>                 'label': 'Relevant',
        >>>                 'value': 'relevant'
        >>>             },
        >>>             {
        >>>                 'description': 'The product is not completely relevant to the query.',
        >>>                 'label': 'Irrelevant',
        >>>                 'value': 'irrelevant'
        >>>             }
        >>>         ],
        >>>         'instruction_examples': [
        >>>             {
        >>>                 'description': 'The product exactly matches the query.',
        >>>                 'label': 'relevant',
        >>>                 'query': 'some search query',
        >>>                 'screenshot_url': 'https://example.com/1'
        >>>             },
        >>>             {
        >>>                 'description': 'The product shape matches but the product color does not.',
        >>>                 'label': 'irrelevant',
        >>>                 'query': 'other search query',
        >>>                 'screenshot_url': 'https://example.com/2'
        >>>             }
        >>>         ]
        >>>     }
        >>> )
        >>> app_project = toloka_client.create_app_project(app_project)
        >>> print(app_project.id, app_project.status)
        ...
    """

    class Status(toloka.util._extendable_enum.ExtendableStrEnum):
        """An enumeration.
        """

        CREATING = 'CREATING'
        READY = 'READY'
        ARCHIVED = 'ARCHIVED'
        ERROR = 'ERROR'

    def __init__(
        self,
        *,
        app_id: typing.Optional[str] = None,
        parent_app_project_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        parameters: typing.Optional[typing.Dict] = None,
        id: typing.Optional[str] = None,
        status: typing.Union[Status, str, None] = None,
        created: typing.Optional[datetime.datetime] = None,
        item_price: typing.Optional[decimal.Decimal] = None,
        errors: typing.Optional[typing.List[_AppError]] = None,
        read_only: typing.Optional[bool] = None,
        app: typing.Optional[AppLightestResult] = None
    ) -> None:
        """Method generated by attrs for class AppProject.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    app_id: typing.Optional[str]
    parent_app_project_id: typing.Optional[str]
    name: typing.Optional[str]
    parameters: typing.Optional[typing.Dict]
    id: typing.Optional[str]
    status: typing.Optional[Status]
    created: typing.Optional[datetime.datetime]
    item_price: typing.Optional[decimal.Decimal]
    errors: typing.Optional[typing.List[_AppError]]
    read_only: typing.Optional[bool]
    app: typing.Optional[AppLightestResult]


class BaseApp(toloka.client.primitives.base.BaseTolokaObject):
    """A lightweight representation of an [App](https://toloka.ai/docs/api/apps-reference/#tag--app) solution.

    Attributes:
        id: The ID of the App solution.
        name: The solution name.
        image: A link to the solution interface preview image.
        description: The solution description.
        default_item_price: The default cost of one annotated item.
        examples: Example description of tasks which can be solved with this solution.
    """

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        image: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        default_item_price: typing.Optional[decimal.Decimal] = None,
        examples: typing.Optional[typing.Any] = None
    ) -> None:
        """Method generated by attrs for class BaseApp.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    id: typing.Optional[str]
    name: typing.Optional[str]
    image: typing.Optional[str]
    description: typing.Optional[str]
    default_item_price: typing.Optional[decimal.Decimal]
    examples: typing.Optional[typing.Any]


class App(BaseApp):
    """An [App](https://toloka.ai/docs/api/apps-reference/#tag--app) solution.

    Each App solution targets specific type of tasks which can be solved using Toloka.

    Attributes:
        id: The ID of the App solution.
        name: The solution name.
        image: A link to the solution interface preview image.
        description: The solution description.
        default_item_price: The default cost of one annotated item.
        examples: Example description of tasks which can be solved with this solution.
        constraints_description: The description of limitations.
        param_spec: The specification of parameters used to create a project.
        input_spec: The schema of solution input data.
        output_spec: The schema of solution output data.
        input_format_info: Information about the input data format.

    Examples:
        Showing all available App solutions.

        >>> apps = toloka_client.get_apps()
        >>> for app in apps:
        >>>     print(app.id, app.name)
        ...
    """

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        image: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        default_item_price: typing.Optional[decimal.Decimal] = None,
        examples: typing.Optional[typing.Any] = None,
        constraints_description: typing.Optional[str] = None,
        param_spec: typing.Optional[typing.Dict] = None,
        input_spec: typing.Optional[typing.Dict[str, toloka.client.project.field_spec.FieldSpec]] = None,
        output_spec: typing.Optional[typing.Dict[str, toloka.client.project.field_spec.FieldSpec]] = None,
        input_format_info: typing.Optional[typing.Dict] = None
    ) -> None:
        """Method generated by attrs for class App.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    id: typing.Optional[str]
    name: typing.Optional[str]
    image: typing.Optional[str]
    description: typing.Optional[str]
    default_item_price: typing.Optional[decimal.Decimal]
    examples: typing.Optional[typing.Any]
    constraints_description: typing.Optional[str]
    param_spec: typing.Optional[typing.Dict]
    input_spec: typing.Optional[typing.Dict[str, toloka.client.project.field_spec.FieldSpec]]
    output_spec: typing.Optional[typing.Dict[str, toloka.client.project.field_spec.FieldSpec]]
    input_format_info: typing.Optional[typing.Dict]


class AppItem(toloka.client.primitives.base.BaseTolokaObject):
    """A task item.

    Items are uploaded to Toloka and are grouped in batches. After uploading the status of items is set to `NEW`.
    Items with that status can be edited. Then entire batches are sent for labeling.

    Attributes:
        id: The ID of the item.
        app_project_id: The ID of the project that contains the item.
        batch_id: The ID of the batch that contains the item.
        input_data: Input data. It must follow the solution schema described in `App.input_spec`.
        status: The item status:
            * `NEW` — The item is uploaded to Toloka and ready for processing.
            * `PROCESSING` — The item is being processed by Tolokers.
            * `COMPLETED` — Item annotation is completed.
            * `ERROR` — An error occurred during processing.
            * `CANCELLED` — Item processing cancelled.
            * `ARCHIVE` — The item is archived.
            * `NO_MONEY` — There are not enough money for processing.
        output_data: Annotated data.
        errors: Errors occurred during annotation.
        created_at: The date and time when the item was created.
        started_at: The date and time when the item processing started.
        finished_at: The date and time when the item processing was completed.

    Example:
        >>> item = toloka_client.get_app_item(app_project_id='Q2d15QBjpwWuDz8Z321g', app_item_id='V40aPPA2j64TORQyY54Z')
        >>> print(item.input_data)
        >>> print(item.output_data)
        ...
    """

    class Status(toloka.util._extendable_enum.ExtendableStrEnum):
        """An enumeration.
        """

        NEW = 'NEW'
        PROCESSING = 'PROCESSING'
        COMPLETED = 'COMPLETED'
        ERROR = 'ERROR'
        CANCELLED = 'CANCELLED'
        ARCHIVE = 'ARCHIVE'
        NO_MONEY = 'NO_MONEY'
        STOPPED = 'STOPPED'

    def __init__(
        self,
        *,
        batch_id: typing.Optional[str] = None,
        input_data: typing.Optional[typing.Dict[str, typing.Any]] = None,
        id: typing.Optional[str] = None,
        app_project_id: typing.Optional[str] = None,
        status: typing.Union[Status, str, None] = None,
        output_data: typing.Optional[typing.Dict[str, typing.Any]] = None,
        errors: typing.Optional[typing.List[_AppError]] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        started_at: typing.Optional[datetime.datetime] = None,
        finished_at: typing.Optional[datetime.datetime] = None
    ) -> None:
        """Method generated by attrs for class AppItem.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    batch_id: typing.Optional[str]
    input_data: typing.Optional[typing.Dict[str, typing.Any]]
    id: typing.Optional[str]
    app_project_id: typing.Optional[str]
    status: typing.Optional[Status]
    output_data: typing.Optional[typing.Dict[str, typing.Any]]
    errors: typing.Optional[typing.List[_AppError]]
    created_at: typing.Optional[datetime.datetime]
    started_at: typing.Optional[datetime.datetime]
    finished_at: typing.Optional[datetime.datetime]


class AppItemCreateRequest(toloka.client.primitives.base.BaseTolokaObject):
    """Parameters of a request for creating single item.

    Attributes:
        batch_id: The ID of the batch that contains the item.
        input_data: Input data. It must follow the solution schema described in `App.input_spec`.
        force_new_original: Whether to enable or disable the deduplication for the item in the request.
            When set to true, the item will be re-labeled regardless of whether pre-labeled duplicates exist. Default is `False`.
    """

    def __init__(
        self,
        *,
        batch_id: typing.Optional[str] = None,
        input_data: typing.Optional[typing.Dict[str, typing.Any]] = None,
        force_new_original: typing.Optional[bool] = None
    ) -> None:
        """Method generated by attrs for class AppItemCreateRequest.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    batch_id: typing.Optional[str]
    input_data: typing.Optional[typing.Dict[str, typing.Any]]
    force_new_original: typing.Optional[bool]


class AppItemsCreateRequest(toloka.client.primitives.base.BaseTolokaObject):
    """Parameters of a request for creating multiple items.

    Attributes:
        batch_id: The ID of the batch to place items to.
        items: A list with items. The items must follow the solution schema described in `App.input_spec`.
        force_new_original: Whether to enable or disable the deduplication for all the items in the request.
            When set to true, all the items will be re-labeled regardless of whether pre-labeled duplicates exist. Default is `False`.
        ignore_errors: Whether the data with incorrect items can be uploaded. Default is `False`.
            * `True` — If incorrect task items are present, they will be skipped and the response will contain the information about errors.
            * `False` — If incorrect task items are present, the data will not be uploaded and the response will contain the information about the errors.
            You can only use this parameter if batch_id is specified in the request.
    """

    def __init__(
        self,
        *,
        batch_id: typing.Optional[str] = None,
        items: typing.List[typing.Dict[str, typing.Any]],
        force_new_original: typing.Optional[bool] = None,
        ignore_errors: typing.Optional[bool] = None
    ) -> None:
        """Method generated by attrs for class AppItemsCreateRequest.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    batch_id: typing.Optional[str]
    items: typing.List[typing.Dict[str, typing.Any]]
    force_new_original: typing.Optional[bool]
    ignore_errors: typing.Optional[bool]


class AppItemImport(toloka.client.primitives.base.BaseTolokaObject):
    """Information about an operation that adds items.

    Attributes:
        id: The ID.
        records_count: The total number of items sent by a client.
        records_processed: The number of items processed during the operation.
        records_skipped: The number of items which had incorrect parameters and were not uploaded during the operation. The detailed information about the error is returned in the `errors` field.
        errors: Information about items with incorrect parameters which were not added.
    """

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        records_count: typing.Optional[int] = None,
        records_processed: typing.Optional[int] = None,
        records_skipped: typing.Optional[int] = None,
        errors: typing.Optional[typing.Dict] = None
    ) -> None:
        """Method generated by attrs for class AppItemImport.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    id: typing.Optional[str]
    records_count: typing.Optional[int]
    records_processed: typing.Optional[int]
    records_skipped: typing.Optional[int]
    errors: typing.Optional[typing.Dict]


class AppBatch(toloka.client.primitives.base.BaseTolokaObject):
    """An App batch.

    A batch contains task items that are sent for labeling together.

    Attributes:
        id: The ID of the batch.
        app_project_id: The ID of the project containing the batch.
        name: The batch name.
        status: The batch [status](toloka.client.app.AppBatch.Status.md).
        items_count: The number of items in the batch.
        item_price: The cost of processing a single item in the batch.
        cost: The cost of processing the batch.
        cost_of_processed: Cost of already processed task items.
        created_at: The date and time when the batch was created.
        started_at: The date and time when batch processing started.
        finished_at: The date and time when batch processing was completed.
        read_only: Whether the batch can be updated or not.
        priority_order: The batch priority. See [PriorityOrder](toloka.client.app.AppBatch.PriorityOrder.md) for details. Default is `FIVE`.
        last_items_import: Information about the last operation that added items.
        confidence_avg: Average labeling quality.
        items_processed_count: The number of labeled items.
        eta: Expected date and time when batch processing will be completed.
        etd: The expected date and time when processing of the queued batch will be started. The parameter is present in the response when the batch status is equal to `QUEUED`, otherwise it's `None`.
        app_project_eta: The expected date and time when processing of all the batches associated with the project will be completed.
            The parameter is present in the response when the project contains batches in the status equal to `QUEUED` or `PROCESSING`, otherwise it's `None`.
        items_per_state: Statistics on the number of items in each state.
        current_time: The server-side date and time when the response was formed.

    Example:
        >>> batches = toloka_client.get_app_batches(app_project_id='Q2d15QBjpwWuDz8Z321g', status='NEW')
        >>> for batch in batches:
        >>>     print(batch.id, batch.status, batch.items_count)
        ...
    """

    class Status(toloka.util._extendable_enum.ExtendableStrEnum):
        """The status of an App batch.

        Attributes:
            NEW: The processing of the batch items is not started.
            QUEUED: The batch is ready for labeling but is currently queued because other batches with higher priority are being labeled.
                Labeling of these batches will automatically start once the labeling of the batches with higher priority finishes.
            PROCESSING: Batch items are being processed by Tolokers.
            COMPLETED: Annotation of all batch items is completed.
            ERROR: An error occurred during processing.
            CANCELLED: Batch processing cancelled.
            ARCHIVE: The batch is archived.
            NO_MONEY: There is not enough money for processing.
            LOADING: Tasks are loading to the batch.
            STOPPING: The batch is stopping.
            STOPPED: The batch has stopped.
        """

        NEW = 'NEW'
        QUEUED = 'QUEUED'
        PROCESSING = 'PROCESSING'
        COMPLETED = 'COMPLETED'
        ERROR = 'ERROR'
        CANCELLED = 'CANCELLED'
        NO_MONEY = 'NO_MONEY'
        ARCHIVE = 'ARCHIVE'
        LOADING = 'LOADING'
        STOPPING = 'STOPPING'
        STOPPED = 'STOPPED'

    class PriorityOrder(toloka.util._extendable_enum.ExtendableStrEnum):
        """The batch priority. ONE is the highest value. The batch items with this priority_order value will be sent
        for labeling first in the queue.
        """

        ONE = 'ONE'
        TWO = 'TWO'
        THREE = 'THREE'
        FOUR = 'FOUR'
        FIVE = 'FIVE'

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        app_project_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        status: typing.Union[Status, str, None] = None,
        items_count: typing.Optional[int] = None,
        item_price: typing.Optional[decimal.Decimal] = None,
        cost: typing.Optional[decimal.Decimal] = None,
        cost_of_processed: typing.Optional[decimal.Decimal] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        started_at: typing.Optional[datetime.datetime] = None,
        finished_at: typing.Optional[datetime.datetime] = None,
        read_only: typing.Optional[bool] = None,
        priority_order: typing.Optional[PriorityOrder] = None,
        last_items_import: typing.Optional[AppItemImport] = None,
        confidence_avg: typing.Optional[float] = None,
        items_processed_count: typing.Optional[int] = None,
        eta: typing.Optional[datetime.datetime] = None,
        etd: typing.Optional[datetime.datetime] = None,
        app_project_eta: typing.Optional[datetime.datetime] = None,
        items_per_state: typing.Optional[typing.Dict] = None,
        current_time: typing.Optional[datetime.datetime] = None
    ) -> None:
        """Method generated by attrs for class AppBatch.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    id: typing.Optional[str]
    app_project_id: typing.Optional[str]
    name: typing.Optional[str]
    status: typing.Optional[Status]
    items_count: typing.Optional[int]
    item_price: typing.Optional[decimal.Decimal]
    cost: typing.Optional[decimal.Decimal]
    cost_of_processed: typing.Optional[decimal.Decimal]
    created_at: typing.Optional[datetime.datetime]
    started_at: typing.Optional[datetime.datetime]
    finished_at: typing.Optional[datetime.datetime]
    read_only: typing.Optional[bool]
    priority_order: typing.Optional[PriorityOrder]
    last_items_import: typing.Optional[AppItemImport]
    confidence_avg: typing.Optional[float]
    items_processed_count: typing.Optional[int]
    eta: typing.Optional[datetime.datetime]
    etd: typing.Optional[datetime.datetime]
    app_project_eta: typing.Optional[datetime.datetime]
    items_per_state: typing.Optional[typing.Dict]
    current_time: typing.Optional[datetime.datetime]


class AppBatchCreateRequest(toloka.client.primitives.base.BaseTolokaObject):
    """Parameters of a request for creating multiple App task items in a batch.

    Attributes:
        name: The batch name.
        items: A list with task items. The items must follow the solution schema described in the `App.input_spec`.
        priority_order: The batch priority. See [PriorityOrder](toloka.client.app.AppBatch.PriorityOrder.md) for details. Default is `FIVE`.
        force_new_original: Whether to enable or disable the deduplication for all the items in the request.
            When set to true, all the items will be re-labeled regardless of whether pre-labeled duplicates exist. Default is `False`.
        ignore_errors: Whether the data with incorrect items can be uploaded. Default is `False`.
    """

    def __init__(
        self,
        *,
        name: typing.Optional[str] = None,
        items: typing.Optional[typing.List[typing.Dict[str, typing.Any]]] = None,
        priority_order: typing.Optional[AppBatch.PriorityOrder] = None,
        force_new_original: typing.Optional[bool] = None,
        ignore_errors: typing.Optional[bool] = None
    ) -> None:
        """Method generated by attrs for class AppBatchCreateRequest.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    name: typing.Optional[str]
    items: typing.Optional[typing.List[typing.Dict[str, typing.Any]]]
    priority_order: typing.Optional[AppBatch.PriorityOrder]
    force_new_original: typing.Optional[bool]
    ignore_errors: typing.Optional[bool]


class SyncBatchCreateRequest(toloka.client.primitives.base.BaseTolokaObject):
    """The batch to be created with the list of the task items.

    Attributes:
        name: The batch name.
        items: A list with task items. The items must follow the solution schema described in the `App.input_spec`.
    """

    def __init__(
        self,
        *,
        name: typing.Optional[str] = None,
        items: typing.Optional[typing.List[typing.Dict[str, typing.Any]]] = None
    ) -> None:
        """Method generated by attrs for class SyncBatchCreateRequest.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    name: typing.Optional[str]
    items: typing.Optional[typing.List[typing.Dict[str, typing.Any]]]


class AppBatchPatch(toloka.client.primitives.base.BaseTolokaObject):
    """Parameters of a request for updating an App batch.

    Attributes:
        name: The new batch name.
        priority_order: The batch priority. See [PriorityOrder](toloka.client.app.AppBatch.PriorityOrder.md) for details.
    """

    def __init__(
        self,
        *,
        name: typing.Optional[str] = None,
        priority_order: typing.Optional[AppBatch.PriorityOrder] = None
    ) -> None:
        """Method generated by attrs for class AppBatchPatch.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    name: typing.Optional[str]
    priority_order: typing.Optional[AppBatch.PriorityOrder]
