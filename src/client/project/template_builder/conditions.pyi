__all__ = [
    'BaseConditionV1',
    'AllConditionV1',
    'AnyConditionV1',
    'DistanceConditionV1',
    'EmptyConditionV1',
    'EqualsConditionV1',
    'LinkOpenedConditionV1',
    'NotConditionV1',
    'PlayedConditionV1',
    'PlayedFullyConditionV1',
    'RequiredConditionV1',
    'SameDomainConditionV1',
    'SchemaConditionV1',
    'SubArrayConditionV1',
]
import toloka.client.project.template_builder.base
import typing


class BaseConditionV1Metaclass(toloka.client.project.template_builder.base.VersionedBaseComponentMetaclass):
    @staticmethod
    def __new__(
        mcs,
        name,
        bases,
        namespace,
        **kwargs
    ): ...


class BaseConditionV1(toloka.client.project.template_builder.base.BaseComponent, metaclass=BaseConditionV1Metaclass):
    """A base class for conditions.

    Attributes:
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class BaseConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]


class AllConditionV1(BaseConditionV1):
    """Checks that all nested conditions are met.

    For more information, see [condition.all](https://toloka.ai/docs/template-builder/reference/condition.all).

    Attributes:
        conditions: A list of conditions.
        hint: A hint that is shown if the condition is not met.

    Examples:
        >>> import toloka.client.project.template_builder as tb
        >>> coordinates_validation = tb.conditions.AllConditionV1(
        >>>     [
        >>>         tb.conditions.RequiredConditionV1(
        >>>             tb.data.OutputData('performer_coordinates'),
        >>>             hint="Couldn't get your coordinates. Please enable geolocation.",
        >>>         ),
        >>>         tb.conditions.DistanceConditionV1(
        >>>             tb.data.LocationData(),
        >>>             tb.data.InputData('coordinates'),
        >>>             500,
        >>>             hint='You are too far from the destination coordinates.',
        >>>         ),
        >>>     ],
        >>> )
        ...
    """

    def __init__(
        self,
        conditions: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, typing.List[toloka.client.project.template_builder.base.BaseComponent]]] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class AllConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    conditions: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, typing.List[toloka.client.project.template_builder.base.BaseComponent]]]


class AnyConditionV1(BaseConditionV1):
    """Checks that at least one nested condition is met.

    For more information, see [condition.any](https://toloka.ai/docs/template-builder/reference/condition.any).

    Attributes:
        conditions: A list of conditions.
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        conditions: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, typing.List[toloka.client.project.template_builder.base.BaseComponent]]] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class AnyConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    conditions: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, typing.List[toloka.client.project.template_builder.base.BaseComponent]]]


class DistanceConditionV1(BaseConditionV1):
    """Checks a distance between two coordinates.

    For more information, see [condition.distance](https://toloka.ai/docs/template-builder/reference/condition.distance).

    Attributes:
        from_: The first point.
        to_: The second point.
        max: The maximum distance in meters.
        hint: A hint that is shown if the condition is not met.

    Examples:
        The following condition gets Toloker's [location](toloka.client.project.template_builder.data.LocationData.md)
        and checks that it is near the task location.

        >>> import toloka.client.project.template_builder as tb
        >>> distance_condition = tb.conditions.DistanceConditionV1(
        >>>     tb.data.LocationData(),
        >>>     tb.data.InputData('coordinates'),
        >>>     500,
        >>>     hint='You are too far from the destination coordinates.',
        >>> )
        ...
    """

    def __init__(
        self,
        from_: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, str]] = None,
        to_: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, str]] = None,
        max: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, float]] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class DistanceConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    from_: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, str]]
    to_: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, str]]
    max: typing.Optional[typing.Union[toloka.client.project.template_builder.base.BaseComponent, float]]


class EmptyConditionV1(BaseConditionV1):
    """Checks that data is empty or undefined.

    For more information, see [condition.empty](https://toloka.ai/docs/template-builder/reference/condition.empty).

    Attributes:
        data: Data to check. If not specified, data of the parent component is checked.
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        data: typing.Optional[typing.Any] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class EmptyConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    data: typing.Optional[typing.Any]


class EqualsConditionV1(BaseConditionV1):
    """Checks whether two values are equal.

    For more information, see [condition.equals](https://toloka.ai/docs/template-builder/reference/condition.equals).

    Attributes:
        to: The value to compare with.
        data: The first value. If it is not specified, then the value returned by the parent component is used.
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        to: typing.Optional[typing.Any] = None,
        data: typing.Optional[typing.Any] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class EqualsConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    to: typing.Optional[typing.Any]
    data: typing.Optional[typing.Any]


class LinkOpenedConditionV1(BaseConditionV1):
    """Checks that a Toloker clicked a link.

    For more information, see [condition.link-opened](https://toloka.ai/docs/template-builder/reference/condition.link-opened).

    Attributes:
        url: The link URL.
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        url: typing.Optional[typing.Any] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class LinkOpenedConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    url: typing.Optional[typing.Any]


class NotConditionV1(BaseConditionV1):
    """Inverts a condition.

    For more information, see [condition.not](https://toloka.ai/docs/template-builder/reference/condition.not).

    Attributes:
        condition: The condition to invert.
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        condition: typing.Optional[toloka.client.project.template_builder.base.BaseComponent] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class NotConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    condition: typing.Optional[toloka.client.project.template_builder.base.BaseComponent]


class PlayedConditionV1(BaseConditionV1):
    """Checks that playback has started.

    For more information, see [condition.played](https://toloka.ai/docs/template-builder/reference/condition.played).

    Attributes:
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class PlayedConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]


class PlayedFullyConditionV1(BaseConditionV1):
    """Checks that playback is complete.

    For more information, see [condition.played-fully](https://toloka.ai/docs/template-builder/reference/condition.played-fully).

    Attributes:
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class PlayedFullyConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]


class RequiredConditionV1(BaseConditionV1):
    """Checks that a data field is present in a response.

    For more information, see [condition.required](https://toloka.ai/docs/template-builder/reference/condition.required).

    Attributes:
        data: The data field. If it is not specified, the data of the parent component is used.
        hint: A hint that is shown if the condition is not met.

    Examples:
        How to check that image is uploaded.

        >>> import toloka.client.project.template_builder as tb
        >>> image = tb.fields.MediaFileFieldV1(
        >>>     tb.data.OutputData('image'),
        >>>     tb.fields.MediaFileFieldV1.Accept(photo=True, gallery=True),
        >>>     validation=tb.conditions.RequiredConditionV1(hint='You must upload a photo.'),
        >>> )
        ...
    """

    def __init__(
        self,
        data: typing.Optional[typing.Any] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class RequiredConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    data: typing.Optional[typing.Any]


class SameDomainConditionV1(BaseConditionV1):
    """Checks that domains in two URLs are the same.

    For more information, see [condition.same-domain](https://toloka.ai/docs/template-builder/reference/condition.same-domain).

    Attributes:
        data: The first URL. If it is not specified, then the value returned by the parent component is used.
        original: The second URL.
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        data: typing.Optional[typing.Any] = None,
        original: typing.Optional[typing.Any] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class SameDomainConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    data: typing.Optional[typing.Any]
    original: typing.Optional[typing.Any]


class SchemaConditionV1(BaseConditionV1):
    """Validates data using the [JSON Schema](https://json-schema.org/learn/getting-started-step-by-step.html).

    For more information, see [condition.schema](https://toloka.ai/docs/template-builder/reference/condition.schema).

    Attributes:
        data: Data to be validated.
        schema: The schema for validating data.
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        data: typing.Optional[typing.Any] = None,
        schema: typing.Optional[typing.Dict] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class SchemaConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    data: typing.Optional[typing.Any]
    schema: typing.Optional[typing.Dict]


class SubArrayConditionV1(BaseConditionV1):
    """Checks that an array is a subarray of another array.

    For more information, see [condition.sub-array](https://toloka.ai/docs/template-builder/reference/condition.sub-array).

    Attributes:
        data: The array to check.
        parent: The array to look in.
        hint: A hint that is shown if the condition is not met.
    """

    def __init__(
        self,
        data: typing.Optional[typing.Any] = None,
        parent: typing.Optional[typing.Any] = None,
        *,
        hint: typing.Optional[typing.Any] = None,
        version: typing.Optional[str] = '1.0.0'
    ) -> None:
        """Method generated by attrs for class SubArrayConditionV1.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    hint: typing.Optional[typing.Any]
    version: typing.Optional[str]
    data: typing.Optional[typing.Any]
    parent: typing.Optional[typing.Any]
