from enum import Enum
from toloka.client.primitives.base import BaseTolokaObject
from toloka.client.project.template_builder import TemplateBuilder
from typing import (
    Any,
    Dict,
    List,
    Optional
)

class ViewSpec(BaseTolokaObject):
    """Description of the task interface
    """

    class Settings(BaseTolokaObject):
        """ViewSpec Settings

        Attributes:
            show_finish: Show the Back to main page button.
            show_fullscreen: Show the Expand to fullscreen button.
            show_instructions: Show the Instructions button.
            show_message: Show the Message for the requester button.
            show_reward: Show the price per task page.
            show_skip: Show the Skip button.
            show_submit: Show the Next button.
            show_timer: Show the timer.
            show_title: Show the project name in task titles.
        """

        def __init__(self, *, show_finish: Optional[bool] = None, show_fullscreen: Optional[bool] = None, show_instructions: Optional[bool] = None, show_message: Optional[bool] = None, show_reward: Optional[bool] = None, show_skip: Optional[bool] = None, show_submit: Optional[bool] = None, show_timer: Optional[bool] = None, show_title: Optional[bool] = None) -> None:
            """Method generated by attrs for class ViewSpec.Settings.
            """
            ...

        _unexpected: Optional[Dict[str, Any]]
        show_finish: Optional[bool]
        show_fullscreen: Optional[bool]
        show_instructions: Optional[bool]
        show_message: Optional[bool]
        show_reward: Optional[bool]
        show_skip: Optional[bool]
        show_submit: Optional[bool]
        show_timer: Optional[bool]
        show_title: Optional[bool]

    class Type(Enum):
        """A view spec type

        Attributes:
            CLASSIC: A view defined with HTML, CSS and JS
            TEMPLATE_BUILDER: A view defined with template builder components
        """

        CLASSIC = 'classic'
        TEMPLATE_BUILDER = 'tb'

    def __init__(self, *, settings: Optional[Settings] = None) -> None:
        """Method generated by attrs for class ViewSpec.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    settings: Optional[Settings]


class ClassicViewSpec(ViewSpec):
    """A classic view specification defined with HTML, CSS and JS.
    For more information, see Toloka Requester's guide
    https://yandex.ru/support/toloka-requester/?lang=en

    Attributes:
        script: JavaScript interface for the task.
        markup: Task interface.
        styles: CSS task interface.
        asserts: Linked files such as:
            * CSS styles
            * JavaScript libraries
            * Toloka assets with the $TOLOKA_ASSETS prefix
            Add items in the order they should be linked when running the task interface.
    """

    class Assets(BaseTolokaObject):
        """style_urls: Links to CSS libraries.
        script_urls: Links to JavaScript libraries and Toloka assets.
            Toloka assets:
            * "$TOLOKA_ASSETS/js/toloka-handlebars-templates.js" — Handlebars. Ssee the description on the template
                engine website here http://handlebarsjs.com/
            * "$TOLOKA_ASSETS/js/image-annotation.js" — Image labeling interface. See image with area selection in
                the Requester's guide here https://yandex.ru/support/toloka-requester/concepts/t-components/image-annotation.html/?lang=en
            Note that the image labeling interface should only be connected together with the Handlebars helpers.
            The order of connection matters:
            >>> scipt_utls = [
            >>>     "$TOLOKA_ASSETS/js/toloka-handlebars-templates.js",
            >>>     "$TOLOKA_ASSETS/js/image-annotation.js",
            >>> ]
        """

        def __init__(self, *, style_urls: Optional[List[str]] = None, script_urls: Optional[List[str]] = None) -> None:
            """Method generated by attrs for class ClassicViewSpec.Assets.
            """
            ...

        _unexpected: Optional[Dict[str, Any]]
        style_urls: Optional[List[str]]
        script_urls: Optional[List[str]]

    def __init__(self, *, settings: Optional[ViewSpec.Settings] = None, script: Optional[str] = None, markup: Optional[str] = None, styles: Optional[str] = None, assets: Optional[Assets] = None) -> None:
        """Method generated by attrs for class ClassicViewSpec.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    settings: Optional[ViewSpec.Settings]
    script: Optional[str]
    markup: Optional[str]
    styles: Optional[str]
    assets: Optional[Assets]


class TemplateBuilderViewSpec(ViewSpec):
    """A template builder view scpecification that defines an interface with
    template builder components

    Attributes:
        config: A template builder config
        core_version: Default template components version. Most users will not need to change this parameter.

    Example:
        How to declare simple interface:

        >>> import toloka.client.project.template_builder as tb
        >>> project_interface = toloka.project.view_spec.TemplateBuilderViewSpec(
        >>>     config=tb.TemplateBuilder(
        >>>         view=tb.view.ListViewV1(
        >>>             items=[header, output_field, radiobuttons],
        >>>             validation=some_validation,
        >>>         ),
        >>>         plugins=[plugin1, plugin2]
        >>>     )
        >>> )
        >>> # add 'project_interface' to 'toloka.project.Project' instance
        ...
    """

    def __init__(self, *, settings: Optional[ViewSpec.Settings] = None, config: Optional[TemplateBuilder] = None, core_version: Optional[str] = '1.0.0') -> None:
        """Method generated by attrs for class TemplateBuilderViewSpec.
        """
        ...

    @classmethod
    def structure(cls, data: dict): ...

    def unstructure(self): ...

    _unexpected: Optional[Dict[str, Any]]
    settings: Optional[ViewSpec.Settings]
    config: Optional[TemplateBuilder]
    core_version: Optional[str]
