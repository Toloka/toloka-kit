__all__ = [
    'FilterCondition',
    'FilterOr',
    'FilterAnd',
    'Condition',
    'Profile',
    'Computed',
    'Skill',
    'Gender',
    'Country',
    'Citizenship',
    'Education',
    'AdultAllowed',
    'DateOfBirth',
    'City',
    'Languages',
    'RegionByPhone',
    'RegionByIp',
    'DeviceCategory',
    'ClientType',
    'OSFamily',
    'OSVersion',
    'OSVersionMajor',
    'OSVersionMinor',
    'OSVersionBugfix',
    'UserAgentType',
    'UserAgentFamily',
    'UserAgentVersion',
    'UserAgentVersionMajor',
    'UserAgentVersionMinor',
    'UserAgentVersionBugfix',
]
import toloka.client.primitives.base
import toloka.client.primitives.operators
import toloka.util._extendable_enum
import typing


class FilterCondition(toloka.client.primitives.base.BaseTolokaObject):
    """Filters for selecting Tolokers who can access tasks.

    For example, you can select Tolokers who have some skill, speak certain languages, or use a smartphone.

    Filters can be combined using the `|` and  `&` operators. Some filters support the `~` operator.

    Example:
        Filtering by language and device category.

        >>> filter = (
        >>>    (toloka.client.filter.Languages.in_('EN')) &
        >>>    (toloka.client.filter.DeviceCategory == toloka.client.filter.DeviceCategory.SMARTPHONE)
        >>> )
        ...
    """

    def __or__(self, other: 'FilterCondition'): ...

    def __and__(self, other: 'FilterCondition'): ...

    def __invert__(self) -> 'FilterCondition': ...

    @classmethod
    def structure(cls, data: dict): ...

    def __init__(self) -> None:
        """Method generated by attrs for class FilterCondition.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]


class FilterOr(FilterCondition):
    """Supports combining filters using the `|` operator.

    Attributes:
        or_: A list of filters.
    """

    def __or__(self, other: FilterCondition): ...

    def __invert__(self) -> 'FilterAnd': ...

    def __iter__(self): ...

    def __getitem__(self, item): ...

    @classmethod
    def structure(cls, data): ...

    def __init__(self, or_: typing.List[FilterCondition]) -> None:
        """Method generated by attrs for class FilterOr.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    or_: typing.List[FilterCondition]


class FilterAnd(FilterCondition):
    """Supports combining filters using the `&` operator.

    Attributes:
        and_: A list of filters.
    """

    def __and__(self, other): ...

    def __invert__(self) -> FilterOr: ...

    def __iter__(self): ...

    def __getitem__(self, item): ...

    @classmethod
    def structure(cls, data): ...

    def __init__(self, and_: typing.List[FilterCondition]) -> None:
        """Method generated by attrs for class FilterAnd.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    and_: typing.List[FilterCondition]


class Condition(FilterCondition):
    """A base class that supports filter conditions.

    Any condition belongs to some category and has a condition operator and a value. These attributes are mapped to API parameters.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: A value to compare with.
            For example, the minimum value of some skill, or a language specified in a Toloker's profile.
    """

    class Category(toloka.util._extendable_enum.ExtendableStrEnum):
        """An enumeration.
        """

        PROFILE = 'profile'
        COMPUTED = 'computed'
        SKILL = 'skill'

    def __invert__(self) -> 'Condition': ...

    @classmethod
    def structure(cls, data): ...

    def __init__(
        self,
        *,
        operator: typing.Any,
        value: typing.Any
    ) -> None:
        """Method generated by attrs for class Condition.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    operator: typing.Any
    value: typing.Any


class Profile(Condition):
    """A base class for a category of filters that use Toloker's profile.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: A value to compare with.
            For example, the minimum value of some skill, or a language specified in a Toloker's profile.
    """

    class Key(toloka.util._extendable_enum.ExtendableStrEnum):
        """Filter names in the `profile` category.
        """

        GENDER = 'gender'
        COUNTRY = 'country'
        CITIZENSHIP = 'citizenship'
        EDUCATION = 'education'
        ADULT_ALLOWED = 'adult_allowed'
        DATE_OF_BIRTH = 'date_of_birth'
        CITY = 'city'
        LANGUAGES = 'languages'
        VERIFIED = 'verified'

    def __init__(
        self,
        *,
        operator: typing.Any,
        value: typing.Any
    ) -> None:
        """Method generated by attrs for class Profile.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    operator: typing.Any
    value: typing.Any


class Computed(Condition):
    """A base class for a category of filters that use connection and client information.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: A value to compare with.
            For example, the minimum value of some skill, or a language specified in a Toloker's profile.
    """

    class Key(toloka.util._extendable_enum.ExtendableStrEnum):
        """Filter names in the `computed` category.
        """

        CLIENT_TYPE = 'client_type'
        REGION_BY_PHONE = 'region_by_phone'
        REGION_BY_IP = 'region_by_ip'
        DEVICE_CATEGORY = 'device_category'
        OS_FAMILY = 'os_family'
        OS_VERSION = 'os_version'
        USER_AGENT_TYPE = 'user_agent_type'
        USER_AGENT_FAMILY = 'user_agent_family'
        USER_AGENT_VERSION = 'user_agent_version'
        OS_VERSION_MAJOR = 'os_version_major'
        OS_VERSION_MINOR = 'os_version_minor'
        OS_VERSION_BUGFIX = 'os_version_bugfix'
        USER_AGENT_VERSION_MAJOR = 'user_agent_version_major'
        USER_AGENT_VERSION_MINOR = 'user_agent_version_minor'
        USER_AGENT_VERSION_BUGFIX = 'user_agent_version_bugfix'

    def __init__(
        self,
        *,
        operator: typing.Any,
        value: typing.Any
    ) -> None:
        """Method generated by attrs for class Computed.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    operator: typing.Any
    value: typing.Any


class Skill(toloka.client.primitives.operators.StatefulComparableConditionMixin, Condition):
    """Filtering Tolokers by skills.

    Pass the ID of a skill to the filter constructor.
    To select Tolokers without a skill, compare created filter with `None`.

    Example:
        Selecting Tolokers with a skill with ID '224' greater than 70.
        >>> filter = toloka.client.filter.Skill('224') > 70

    Attributes:
        key: The ID of a skill.
        operator: An operator in the condition.
        value: A value to compare the skill with.
    """

    def __init__(
        self,
        key: str,
        operator: toloka.client.primitives.operators.CompareOperator = toloka.client.primitives.operators.CompareOperator.EQ,
        value: typing.Optional[float] = None
    ) -> None:
        """Method generated by attrs for class Skill.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    operator: toloka.client.primitives.operators.CompareOperator
    value: typing.Optional[float]
    key: str


class Gender(Profile, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by gender.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: Toloker's gender specified in the profile.
    """

    class Gender(toloka.util._extendable_enum.ExtendableStrEnum):
        """Toloker's gender.
        """

        MALE = 'MALE'
        FEMALE = 'FEMALE'

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: typing.Union[Gender, str]
    ) -> None:
        """Method generated by attrs for class Gender.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: Gender


class Country(Profile, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by a country of residence specified in their profiles.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: A two-letter code of the country taken from the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) standard.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: str
    ) -> None:
        """Method generated by attrs for class Country.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: str


class Citizenship(Profile, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by a country of citizenship specified in their profiles.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: A two-letter code of the country taken from the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) standard.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: str
    ) -> None:
        """Method generated by attrs for class Citizenship.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: str


class Education(Profile, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by a level of education specified in their profiles.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: Toloker's level of education.
    """

    class Education(toloka.util._extendable_enum.ExtendableStrEnum):
        """Toloker's education level.
        """

        BASIC = 'BASIC'
        MIDDLE = 'MIDDLE'
        HIGH = 'HIGH'

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: typing.Union[Education, str]
    ) -> None:
        """Method generated by attrs for class Education.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: Education


class AdultAllowed(Profile, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers who agreed to work with adult content.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: * `True` — Toloker agrees to work with adult content.
            * `False` — Toloker does not agree to work with adult content.

    Examples:
        >>> adult_allowed_filter = toloka.client.filter.AdultAllowed == True
        >>> adult_not_allowed_filter = toloka.client.filter.AdultAllowed == False
        ...
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: bool
    ) -> None:
        """Method generated by attrs for class AdultAllowed.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: bool


class DateOfBirth(Profile, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by a date of birth.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The date of birth in seconds since January 1, 1970 (UNIX time).
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: int
    ) -> None:
        """Method generated by attrs for class DateOfBirth.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: int


class City(Profile, toloka.client.primitives.operators.InclusionConditionMixin):
    """Filtering Tolokers by a city specified in their profiles.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The [ID](https://toloka.ai/en/docs/api/concepts/regions) of the city.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.InclusionOperator,
        value: int
    ) -> None:
        """Method generated by attrs for class City.
        """
        ...

    operator: toloka.client.primitives.operators.InclusionOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: int


class Languages(Profile, toloka.client.primitives.operators.InclusionConditionMixin):
    """Filtering Tolokers by languages specified in their profiles.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: Languages specified in the profile. A two-letter [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) code in upper case is used.
        verified: If set to `True`, only Tolokers who have passed a language test are selected.
            Tests are available for languages: `AR`, `DE`, `EN`, `ES`, `FR`,
            `HE`, `ID`, `JA`, `PT`, `RU`, `SV`, `ZH-HANS`.
    """

    def __getnewargs__(self):
        """Due to redefined __new__ method class can't be deepcopied or pickled without __getnewargs__ definition
        """
        ...

    def __init__(
        self,
        operator: toloka.client.primitives.operators.InclusionOperator,
        value: typing.Union[str, typing.List[str]],
        verified: bool = False
    ) -> None:
        """Method generated by attrs for class Languages.
        """
        ...

    operator: toloka.client.primitives.operators.InclusionOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: typing.Union[str, typing.List[str]]


class RegionByPhone(Computed, toloka.client.primitives.operators.InclusionConditionMixin):
    """Filtering Tolokers by a region which is determined by their mobile phone number.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The ID from the [list of regions](https://toloka.ai/en/docs/api/concepts/regions).
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.InclusionOperator,
        value: int
    ) -> None:
        """Method generated by attrs for class RegionByPhone.
        """
        ...

    operator: toloka.client.primitives.operators.InclusionOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: int


class RegionByIp(Computed, toloka.client.primitives.operators.InclusionConditionMixin):
    """Filtering Tolokers by a region which is determined by their IP address.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The ID from the [list of regions](https://toloka.ai/en/docs/api/concepts/regions).
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.InclusionOperator,
        value: int
    ) -> None:
        """Method generated by attrs for class RegionByIp.
        """
        ...

    operator: toloka.client.primitives.operators.InclusionOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: int


class DeviceCategory(Computed, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by their device category.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The Toloker's device category.
    """

    class DeviceCategory(toloka.util._extendable_enum.ExtendableStrEnum):
        """Device categories.
        """

        PERSONAL_COMPUTER = 'PERSONAL_COMPUTER'
        SMARTPHONE = 'SMARTPHONE'
        TABLET = 'TABLET'
        WEARABLE_COMPUTER = 'WEARABLE_COMPUTER'

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: typing.Union[DeviceCategory, str]
    ) -> None:
        """Method generated by attrs for class DeviceCategory.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: DeviceCategory


class ClientType(Computed, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by a client application type.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The client application type.
    """

    class ClientType(toloka.util._extendable_enum.ExtendableStrEnum):
        """Client application types.
        """

        BROWSER = 'BROWSER'
        TOLOKA_APP = 'TOLOKA_APP'

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: typing.Union[ClientType, str]
    ) -> None:
        """Method generated by attrs for class ClientType.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: ClientType


class OSFamily(Computed, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by their OS family.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The OS family.
    """

    class OSFamily(toloka.util._extendable_enum.ExtendableStrEnum):
        """OS families.
        """

        WINDOWS = 'WINDOWS'
        OS_X = 'OS_X'
        MAC_OS = 'MAC_OS'
        LINUX = 'LINUX'
        BSD = 'BSD'
        ANDROID = 'ANDROID'
        IOS = 'IOS'
        BLACKBERRY = 'BLACKBERRY'

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: typing.Union[OSFamily, str]
    ) -> None:
        """Method generated by attrs for class OSFamily.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: OSFamily


class OSVersion(Computed, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by an OS version.

    The version consists of major and minor version numbers, for example, `14.4`.
    The version is represented as a single floating point number in conditions.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The version of the OS.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: float
    ) -> None:
        """Method generated by attrs for class OSVersion.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: float


class OSVersionMajor(Computed, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by an OS major version.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The major version of the OS.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: int
    ) -> None:
        """Method generated by attrs for class OSVersionMajor.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: int


class OSVersionMinor(Computed, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by an OS minor version.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The minor version of the OS.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: int
    ) -> None:
        """Method generated by attrs for class OSVersionMinor.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: int


class OSVersionBugfix(Computed, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by a build number or a bugfix version of their OS.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The build number or the bugfix version of the OS.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: int
    ) -> None:
        """Method generated by attrs for class OSVersionBugfix.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: int


class UserAgentType(Computed, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by a user agent type.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The user agent type.
    """

    class UserAgentType(toloka.util._extendable_enum.ExtendableStrEnum):
        """User agent types.
        """

        BROWSER = 'BROWSER'
        MOBILE_BROWSER = 'MOBILE_BROWSER'
        OTHER = 'OTHER'

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: typing.Union[UserAgentType, str]
    ) -> None:
        """Method generated by attrs for class UserAgentType.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: UserAgentType


class UserAgentFamily(Computed, toloka.client.primitives.operators.IdentityConditionMixin):
    """Filtering Tolokers by a user agent family.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The user agent family.
    """

    class UserAgentFamily(toloka.util._extendable_enum.ExtendableStrEnum):
        """User agent families.
        """

        IE = 'IE'
        CHROMIUM = 'CHROMIUM'
        CHROME = 'CHROME'
        FIREFOX = 'FIREFOX'
        SAFARI = 'SAFARI'
        YANDEX_BROWSER = 'YANDEX_BROWSER'
        IE_MOBILE = 'IE_MOBILE'
        CHROME_MOBILE = 'CHROME_MOBILE'
        MOBILE_FIREFOX = 'MOBILE_FIREFOX'
        MOBILE_SAFARI = 'MOBILE_SAFARI'

    def __init__(
        self,
        operator: toloka.client.primitives.operators.IdentityOperator,
        value: typing.Union[UserAgentFamily, str]
    ) -> None:
        """Method generated by attrs for class UserAgentFamily.
        """
        ...

    operator: toloka.client.primitives.operators.IdentityOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: UserAgentFamily


class UserAgentVersion(Computed, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by a browser version.

    The version consists of major and minor version numbers.
    The version is represented as a single floating point number in conditions.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The version of the browser.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: typing.Optional[float] = None
    ) -> None:
        """Method generated by attrs for class UserAgentVersion.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: typing.Optional[float]


class UserAgentVersionMajor(Computed, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by a major browser version.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The major browser version.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: typing.Optional[int] = None
    ) -> None:
        """Method generated by attrs for class UserAgentVersionMajor.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: typing.Optional[int]


class UserAgentVersionMinor(Computed, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by a minor browser version.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The minor browser version.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: typing.Optional[int] = None
    ) -> None:
        """Method generated by attrs for class UserAgentVersionMinor.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: typing.Optional[int]


class UserAgentVersionBugfix(Computed, toloka.client.primitives.operators.ComparableConditionMixin):
    """Filtering Tolokers by a build number or a bugfix version of their browser.

    Attributes:
        operator: An operator used in a condition.
            Allowed set of operators depends on the filter.
        value: The build number or the bugfix version of the browser.
    """

    def __init__(
        self,
        operator: toloka.client.primitives.operators.CompareOperator,
        value: typing.Optional[int] = None
    ) -> None:
        """Method generated by attrs for class UserAgentVersionBugfix.
        """
        ...

    operator: toloka.client.primitives.operators.CompareOperator
    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    value: typing.Optional[int]
