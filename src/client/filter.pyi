from enum import Enum
from toloka.client.primitives.base import BaseTolokaObject
from toloka.client.primitives.operators import (
    ComparableConditionMixin,
    CompareOperator,
    IdentityConditionMixin,
    IdentityOperator,
    InclusionConditionMixin,
    InclusionOperator,
    StatefulComparableConditionMixin
)
from typing import (
    Any,
    Dict,
    List,
    Optional,
    Union
)

class FilterCondition(BaseTolokaObject):
    """You can select users to access pool tasks.

    For example, you can select users by region, skill, or browser type (desktop or mobile).

    Example:
        How to setup filter for selecting users.

        >>> # you can combine filters using bitwise operators '|' and  '&'
        >>> filter = (
        >>>    (toloka.filter.Languages.in_('EN')) &
        >>>    (toloka.client.filter.DeviceCategory.in_(toloka.client.filter.DeviceCategory.SMARTPHONE))
        >>> )
        ...
    """

    def __init__(self) -> None:
        """Method generated by attrs for class FilterCondition.
        """
        ...

    @classmethod
    def structure(cls, data: dict): ...

    _unexpected: Optional[Dict[str, Any]]


class FilterOr(FilterCondition):
    """Use to combine multiple filters via "or" logic

    Attributes:
        or_: list of filters to combine
    """

    def __init__(self, or_: List[FilterCondition]) -> None:
        """Method generated by attrs for class FilterOr.
        """
        ...

    @classmethod
    def structure(cls, data): ...

    _unexpected: Optional[Dict[str, Any]]
    or_: List[FilterCondition]


class FilterAnd(FilterCondition):
    """Use to combine multiple filters via "and" logic

    Attributes:
        and_: list of filters to combine
    """

    def __init__(self, and_: List[FilterCondition]) -> None:
        """Method generated by attrs for class FilterAnd.
        """
        ...

    @classmethod
    def structure(cls, data): ...

    _unexpected: Optional[Dict[str, Any]]
    and_: List[FilterCondition]


class Condition(FilterCondition):
    """Condition to select users.

    Attributes:
        operator: Comparison operator in the condition.
            For example, for a condition "The user must be 18 years old or older» used date of birth and operator
            GTE («Greater than or equal»). Possible key values operator depends on the data type in the field value
        value: Attribute value from the field key. For example, the ID of the region specified in the profile,
            or the minimum skill value.
    """

    class Category(Enum):
        """An enumeration.
        """

        PROFILE = 'profile'
        COMPUTED = 'computed'
        SKILL = 'skill'

    def __init__(self, *, operator: Any, value: Any) -> None:
        """Method generated by attrs for class Condition.
        """
        ...

    @classmethod
    def structure(cls, data): ...

    _unexpected: Optional[Dict[str, Any]]
    operator: Any
    value: Any


class Profile(Condition):
    """Use to select users based on profile data.

    Attributes:
        operator: Comparison operator in the condition.
        value: Attribute value from the field key.
    """

    class Key(Enum):
        """Possible criteria for filtering users by profile.
        """

        GENDER = 'gender'
        COUNTRY = 'country'
        CITIZENSHIP = 'citizenship'
        EDUCATION = 'education'
        ADULT_ALLOWED = 'adult_allowed'
        DATE_OF_BIRTH = 'date_of_birth'
        CITY = 'city'
        LANGUAGES = 'languages'

    def __init__(self, *, operator: Any, value: Any) -> None:
        """Method generated by attrs for class Profile.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    operator: Any
    value: Any


class Computed(Condition):
    """Use to select users based on data received or calculated by Toloka.

    Attributes:
        operator: Comparison operator in the condition.
        value: Attribute value from the field key.
    """

    class Key(Enum):
        """Possible criteria for filtering users by computed data.
        """

        CLIENT_TYPE = 'client_type'
        REGION_BY_PHONE = 'region_by_phone'
        REGION_BY_IP = 'region_by_ip'
        RATING = 'rating'
        DEVICE_CATEGORY = 'device_category'
        OS_FAMILY = 'os_family'
        OS_VERSION = 'os_version'
        USER_AGENT_TYPE = 'user_agent_type'
        USER_AGENT_FAMILY = 'user_agent_family'
        USER_AGENT_VERSION = 'user_agent_version'
        OS_VERSION_MAJOR = 'os_version_major'
        OS_VERSION_MINOR = 'os_version_minor'
        OS_VERSION_BUGFIX = 'os_version_bugfix'
        USER_AGENT_VERSION_MAJOR = 'user_agent_version_major'
        USER_AGENT_VERSION_MINOR = 'user_agent_version_minor'
        USER_AGENT_VERSION_BUGFIX = 'user_agent_version_bugfix'

    def __init__(self, *, operator: Any, value: Any) -> None:
        """Method generated by attrs for class Computed.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    operator: Any
    value: Any


class Skill(StatefulComparableConditionMixin, Condition):
    """Use to select users by skill value.

    To select users without a skill set the parameter value operator=CompareOperator.EQ and exclude the parameter value.
    Attributes:
        key: Skill ID.
        operator: Comparison operator in the condition.
        value: Attribute value from the field key.
    """

    def __init__(self, key: str, operator: CompareOperator = ..., value: Optional[float] = None) -> None:
        """Method generated by attrs for class Skill.
        """
        ...

    _unexpected: Optional[Dict[str, Any]]
    operator: CompareOperator
    value: Optional[float]
    key: str


class Gender(Profile, IdentityConditionMixin):
    """Use to select users by gender.

    Attributes:
        value: User gender.
    """

    class Gender(Enum):
        """User gender.
        """

        MALE = 'MALE'
        FEMALE = 'FEMALE'

    def __init__(self, operator: IdentityOperator, value: Gender) -> None:
        """Method generated by attrs for class Gender.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: Gender


class Country(Profile, IdentityConditionMixin):
    """Use to select users by country.

    Attributes:
        value: Country of the user (two-letter code of the standard ISO 3166-1 alpha-2).
    """

    def __init__(self, operator: IdentityOperator, value: str) -> None:
        """Method generated by attrs for class Country.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: str


class Citizenship(Profile, IdentityConditionMixin):
    """Use to select users by citizenship.

    Attributes:
        value: User citizenship (two-letter country code) ISO 3166-1 alpha-2
    """

    def __init__(self, operator: IdentityOperator, value: str) -> None:
        """Method generated by attrs for class Citizenship.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: str


class Education(Profile, IdentityConditionMixin):
    """Use to select users by education.

    Attributes:
        value: User education.
    """

    class Education(Enum):
        """User education.
        """

        BASIC = 'BASIC'
        MIDDLE = 'MIDDLE'
        HIGH = 'HIGH'

    def __init__(self, operator: IdentityOperator, value: Education) -> None:
        """Method generated by attrs for class Education.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: Education


class AdultAllowed(Profile, IdentityConditionMixin):
    """Use to select users by their agreement to perform tasks that contain adult content.

    Attributes:
        value: User agreement.
    """

    def __init__(self, operator: IdentityOperator, value: bool) -> None:
        """Method generated by attrs for class AdultAllowed.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: bool


class DateOfBirth(Profile, ComparableConditionMixin):
    """Use to select users by date of birth.

    Attributes:
        value: The user's date of birth (UNIX time in seconds).
    """

    def __init__(self, operator: CompareOperator, value: int) -> None:
        """Method generated by attrs for class DateOfBirth.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: int


class City(Profile, InclusionConditionMixin):
    """Use to select users by city.

    Attributes:
        value: User city(ID of the region).
    """

    def __init__(self, operator: InclusionOperator, value: int) -> None:
        """Method generated by attrs for class City.
        """
        ...

    operator: InclusionOperator
    _unexpected: Optional[Dict[str, Any]]
    value: int


class Languages(Profile, InclusionConditionMixin):
    """Use to select users by languages specified by the user in the profile.

    Attributes:
        value: Languages specified by the user in the profile (two-letter ISO code of the standard ISO 639-1 in upper case).
    """

    def __init__(self, operator: InclusionOperator, value: Union[str, List[str]]) -> None:
        """Method generated by attrs for class Languages.
        """
        ...

    operator: InclusionOperator
    _unexpected: Optional[Dict[str, Any]]
    value: Union[str, List[str]]


class RegionByPhone(Computed, InclusionConditionMixin):
    """Use to select users by their region determined by the mobile phone number.

    Attributes:
        value: The user's region.
    """

    def __init__(self, operator: InclusionOperator, value: int) -> None:
        """Method generated by attrs for class RegionByPhone.
        """
        ...

    operator: InclusionOperator
    _unexpected: Optional[Dict[str, Any]]
    value: int


class RegionByIp(Computed, InclusionConditionMixin):
    """Use to select users by their region determined by IP address.

    Attributes:
        value: The user's region.
    """

    def __init__(self, operator: InclusionOperator, value: int) -> None:
        """Method generated by attrs for class RegionByIp.
        """
        ...

    operator: InclusionOperator
    _unexpected: Optional[Dict[str, Any]]
    value: int


class DeviceCategory(Computed, IdentityConditionMixin):
    """Use to select users by their device category.

    Attributes:
        value: The user's device category.
    """

    class DeviceCategory(Enum):
        """Device сategory.
        """

        PERSONAL_COMPUTER = 'PERSONAL_COMPUTER'
        SMARTPHONE = 'SMARTPHONE'
        TABLET = 'TABLET'
        WEARABLE_COMPUTER = 'WEARABLE_COMPUTER'

    def __init__(self, operator: IdentityOperator, value: DeviceCategory) -> None:
        """Method generated by attrs for class DeviceCategory.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: DeviceCategory


class ClientType(Computed, IdentityConditionMixin):
    """Use to select users by their application type.

    Attributes:
        value: Client application type.
    """

    class ClientType(Enum):
        """Client application type.
        """

        BROWSER = 'BROWSER'
        TOLOKA_APP = 'TOLOKA_APP'

    def __init__(self, operator: IdentityOperator, value: ClientType) -> None:
        """Method generated by attrs for class ClientType.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: ClientType


class OSFamily(Computed, IdentityConditionMixin):
    """Use to select users by their OS family.

    Attributes:
        value: The operating system family.
    """

    class OSFamily(Enum):
        """The operating system family.
        """

        WINDOWS = 'WINDOWS'
        OS_X = 'OS_X'
        MAC_OS = 'MAC_OS'
        LINUX = 'LINUX'
        BSD = 'BSD'
        ANDROID = 'ANDROID'
        IOS = 'IOS'
        BLACKBERRY = 'BLACKBERRY'

    def __init__(self, operator: IdentityOperator, value: OSFamily) -> None:
        """Method generated by attrs for class OSFamily.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: OSFamily


class OSVersion(Computed, ComparableConditionMixin):
    """Use to select users by OS full version.

    For example: 14.4
    Attributes:
        value: Full version of the operating system.
    """

    def __init__(self, operator: CompareOperator, value: float) -> None:
        """Method generated by attrs for class OSVersion.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: float


class OSVersionMajor(Computed, ComparableConditionMixin):
    """Use to select users by OS major version.

    For example: 14
    Attributes:
        value: Major version of the operating system.
    """

    def __init__(self, operator: CompareOperator, value: int) -> None:
        """Method generated by attrs for class OSVersionMajor.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: int


class OSVersionMinor(Computed, ComparableConditionMixin):
    """Use to select users by OS minor version.

    For example: 4
    Attributes:
        value: Minor version of the operating system.
    """

    def __init__(self, operator: CompareOperator, value: int) -> None:
        """Method generated by attrs for class OSVersionMinor.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: int


class OSVersionBugfix(Computed, ComparableConditionMixin):
    """Use to select users by build number (bugfix version) of the operating system.

    For example: 1
    Attributes:
        value: Build number (bugfix version) of the operating system.
    """

    def __init__(self, operator: CompareOperator, value: int) -> None:
        """Method generated by attrs for class OSVersionBugfix.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: int


class UserAgentType(Computed, IdentityConditionMixin):
    """Use to select users by user agent type:

    Attributes:
        value: User agent type.
    """

    class UserAgentType(Enum):
        """User agent type.
        """

        BROWSER = 'BROWSER'
        MOBILE_BROWSER = 'MOBILE_BROWSER'
        OTHER = 'OTHER'

    def __init__(self, operator: IdentityOperator, value: UserAgentType) -> None:
        """Method generated by attrs for class UserAgentType.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: UserAgentType


class UserAgentFamily(Computed, IdentityConditionMixin):
    """Use to select users by user agent family.

    Attributes:
        value: User agent family.
    """

    class UserAgentFamily(Enum):
        """User agent family.
        """

        IE = 'IE'
        CHROMIUM = 'CHROMIUM'
        CHROME = 'CHROME'
        FIREFOX = 'FIREFOX'
        SAFARI = 'SAFARI'
        YANDEX_BROWSER = 'YANDEX_BROWSER'
        IE_MOBILE = 'IE_MOBILE'
        CHROME_MOBILE = 'CHROME_MOBILE'
        MOBILE_FIREFOX = 'MOBILE_FIREFOX'
        MOBILE_SAFARI = 'MOBILE_SAFARI'

    def __init__(self, operator: IdentityOperator, value: UserAgentFamily) -> None:
        """Method generated by attrs for class UserAgentFamily.
        """
        ...

    operator: IdentityOperator
    _unexpected: Optional[Dict[str, Any]]
    value: UserAgentFamily


class UserAgentVersion(Computed, ComparableConditionMixin):
    """Use to select users by full browser version.

    Attributes:
        value: Full browser version. <Major version>.<Minor version>.
    """

    def __init__(self, operator: CompareOperator, value: Optional[float] = None) -> None:
        """Method generated by attrs for class UserAgentVersion.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: Optional[float]


class UserAgentVersionMajor(Computed, ComparableConditionMixin):
    """Use to select users by major browser version.

    Attributes:
        value: Major browser version.
    """

    def __init__(self, operator: CompareOperator, value: Optional[int] = None) -> None:
        """Method generated by attrs for class UserAgentVersionMajor.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: Optional[int]


class UserAgentVersionMinor(Computed, ComparableConditionMixin):
    """Use to select users by minor browser version.

    Attributes:
        value: Minor browser version.
    """

    def __init__(self, operator: CompareOperator, value: Optional[int] = None) -> None:
        """Method generated by attrs for class UserAgentVersionMinor.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: Optional[int]


class UserAgentVersionBugfix(Computed, ComparableConditionMixin):
    """Use to select users by build number (bugfix version) of the browser.

    Attributes:
        value: Build number (bugfix version) of the browser.
    """

    def __init__(self, operator: CompareOperator, value: Optional[int] = None) -> None:
        """Method generated by attrs for class UserAgentVersionBugfix.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: Optional[int]


class Rating(Computed, ComparableConditionMixin):
    """Use to select users by user rating.

    Attributes:
        value: User rating. Calculated based on earnings in all projects available to the user.
    """

    def __init__(self, operator: CompareOperator, value: Optional[float] = None) -> None:
        """Method generated by attrs for class Rating.
        """
        ...

    operator: CompareOperator
    _unexpected: Optional[Dict[str, Any]]
    value: Optional[float]
