__all__ = [
    'AnalyticsRequest',
    'PoolAnalyticsRequest',
    'RealTasksCountPoolAnalytics',
    'SubmittedAssignmentsCountPoolAnalytics',
    'SkippedAssignmentsCountPoolAnalytics',
    'RejectedAssignmentsCountPoolAnalytics',
    'ApprovedAssignmentsCountPoolAnalytics',
    'CompletionPercentagePoolAnalytics',
    'AvgSubmitAssignmentMillisPoolAnalytics',
    'SpentBudgetPoolAnalytics',
    'UniqueWorkersCountPoolAnalytics',
    'UniqueSubmittersCountPoolAnalytics',
    'ActiveWorkersByFilterCountPoolAnalytics',
    'EstimatedAssignmentsCountPoolAnalytics',
]
import toloka.client.primitives.base
import toloka.util._extendable_enum
import typing


class AnalyticsRequest(toloka.client.primitives.base.BaseTolokaObject):
    """A base class for analytics requests.

    Make analytics requests to Toloka with the [get_analytics](toloka.client.TolokaClient.get_analytics.md) method.

    Attributes:
        subject_id: The ID of an object to get analytics about.
    """

    class Subject(toloka.util._extendable_enum.ExtendableStrEnum):
        """An enumeration.
        """

        POOL = 'POOL'

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class AnalyticsRequest.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class PoolAnalyticsRequest(AnalyticsRequest):
    """A base class for analytics requests about pools.

    Attributes:
        subject_id: The ID of a pool to get analytics about.
    """

    class Subject(toloka.util._extendable_enum.ExtendableStrEnum):
        """An enumeration.
        """

        REAL_TASKS_COUNT = 'real_tasks_count'
        SUBMITTED_ASSIGNMENTS_COUNT = 'submitted_assignments_count'
        SKIPPED_ASSIGNMENTS_COUNT = 'skipped_assignments_count'
        REJECTED_ASSIGNMENTS_COUNT = 'rejected_assignments_count'
        APPROVED_ASSIGNMENTS_COUNT = 'approved_assignments_count'
        COMPLETION_PERCENTAGE = 'completion_percentage'
        AVG_SUBMIT_ASSIGNMENT_MILLIS = 'avg_submit_assignment_millis'
        SPENT_BUDGET = 'spent_budget'
        UNIQUE_WORKERS_COUNT = 'unique_workers_count'
        UNIQUE_SUBMITTERS_COUNT = 'unique_submitters_count'
        ACTIVE_WORKERS_BY_FILTER_COUNT = 'active_workers_by_filter_count'
        ESTIMATED_ASSIGNMENTS_COUNT = 'estimated_assignments_count'

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class PoolAnalyticsRequest.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class RealTasksCountPoolAnalytics(PoolAnalyticsRequest):
    """Counts the number of general tasks in a pool.

    Note, that `RealTasksCountPoolAnalytics` doesn't take into account control and training tasks, and task overlap.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.RealTasksCountPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']
        >>> print(count)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class RealTasksCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class SubmittedAssignmentsCountPoolAnalytics(PoolAnalyticsRequest):
    """Counts the total number of completed assignments in a pool.

    It counts assignments with the `SUBMITTED`, `ACCEPTED`, or `REJECTED` status.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.SubmittedAssignmentsCountPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']
        >>> print(count)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class SubmittedAssignmentsCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class SkippedAssignmentsCountPoolAnalytics(PoolAnalyticsRequest):
    """Counts the number of assignments with the `SKIPPED` status in a pool.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.SkippedAssignmentsCountPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']
        >>> print(count)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class SkippedAssignmentsCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class RejectedAssignmentsCountPoolAnalytics(PoolAnalyticsRequest):
    """Counts the number of assignments with the `REJECTED` status in a pool.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.RejectedAssignmentsCountPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']
        >>> print(count)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class RejectedAssignmentsCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class ApprovedAssignmentsCountPoolAnalytics(PoolAnalyticsRequest):
    """Counts the number of assignments with the `ACCEPTED` status in a pool.

    Do not confuse these task statuses:
        * `SUBMITTED` tasks are completed by Tolokers and sent for a review.
        * `ACCEPTED` tasks have passed the review and have been paid for.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.ApprovedAssignmentsCountPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']
        >>> print(count)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class ApprovedAssignmentsCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class CompletionPercentagePoolAnalytics(PoolAnalyticsRequest):
    """Calculates the percentage of completed tasks in a pool.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.CompletionPercentagePoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> percentage = operation.details['value'][0]['result']['value']
        >>> print(percentage)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class CompletionPercentagePoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class AvgSubmitAssignmentMillisPoolAnalytics(PoolAnalyticsRequest):
    """Calculates the average time in milliseconds for completing one task suite.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.AvgSubmitAssignmentMillisPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> ms = operation.details['value'][0]['result']
        >>> print(ms)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class AvgSubmitAssignmentMillisPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class SpentBudgetPoolAnalytics(PoolAnalyticsRequest):
    """Shows money spent on a pool, excluding fees.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.SpentBudgetPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> spent = operation.details['value'][0]['result']
        >>> print(spent)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class SpentBudgetPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class UniqueWorkersCountPoolAnalytics(PoolAnalyticsRequest):
    """Counts the number of Tolokers who took tasks from a pool.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.UniqueWorkersCountPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']
        >>> print(count)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class UniqueWorkersCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class UniqueSubmittersCountPoolAnalytics(PoolAnalyticsRequest):
    """Counts the number of Tolokers who completed at least one task suite in a pool.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.UniqueSubmittersCountPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']
        >>> print(count)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class UniqueSubmittersCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str


class ActiveWorkersByFilterCountPoolAnalytics(PoolAnalyticsRequest):
    """Counts the number of active Tolokers that match pool filters.

    Active Tolokers are Tolokers who viewed and completed tasks recently.

    Attributes:
        subject_id: The ID of a pool to get analytics about.
        interval_hours: The interval in hours to take into account.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.ActiveWorkersByFilterCountPoolAnalytics(subject_id='1084779', interval_hours=3)]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']
        >>> print(count)
        ...
    """

    def __init__(
        self,
        *,
        subject_id: str,
        interval_hours: int
    ) -> None:
        """Method generated by attrs for class ActiveWorkersByFilterCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str
    interval_hours: int


class EstimatedAssignmentsCountPoolAnalytics(PoolAnalyticsRequest):
    """The approximate number of responses to task pages.

    Attributes:
        subject_id: The ID of a pool to get analytics about.

    Examples:
        >>> operation = toloka_client.get_analytics(
        >>>     [toloka.client.analytics_request.EstimatedAssignmentsCountPoolAnalytics(subject_id='1084779')]
        >>> )
        >>> operation = toloka_client.wait_operation(operation)
        >>> count = operation.details['value'][0]['result']['value']
        >>> print(count)
        ...
    """

    def __init__(self, *, subject_id: str) -> None:
        """Method generated by attrs for class EstimatedAssignmentsCountPoolAnalytics.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
    subject_id: str
